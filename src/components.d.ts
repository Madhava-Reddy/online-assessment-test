/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface AppRoot {
    }
    interface QuestionPage {
        "question": any;
        "section": string;
    }
    interface StartPage {
    }
    interface SubmitPage {
        "answers": any;
    }
}
export interface QuestionPageCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLQuestionPageElement;
}
export interface StartPageCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLStartPageElement;
}
declare global {
    interface HTMLAppRootElement extends Components.AppRoot, HTMLStencilElement {
    }
    var HTMLAppRootElement: {
        prototype: HTMLAppRootElement;
        new (): HTMLAppRootElement;
    };
    interface HTMLQuestionPageElementEventMap {
        "answerSelected": any;
    }
    interface HTMLQuestionPageElement extends Components.QuestionPage, HTMLStencilElement {
        addEventListener<K extends keyof HTMLQuestionPageElementEventMap>(type: K, listener: (this: HTMLQuestionPageElement, ev: QuestionPageCustomEvent<HTMLQuestionPageElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLQuestionPageElementEventMap>(type: K, listener: (this: HTMLQuestionPageElement, ev: QuestionPageCustomEvent<HTMLQuestionPageElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLQuestionPageElement: {
        prototype: HTMLQuestionPageElement;
        new (): HTMLQuestionPageElement;
    };
    interface HTMLStartPageElementEventMap {
        "start": any;
    }
    interface HTMLStartPageElement extends Components.StartPage, HTMLStencilElement {
        addEventListener<K extends keyof HTMLStartPageElementEventMap>(type: K, listener: (this: HTMLStartPageElement, ev: StartPageCustomEvent<HTMLStartPageElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLStartPageElementEventMap>(type: K, listener: (this: HTMLStartPageElement, ev: StartPageCustomEvent<HTMLStartPageElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLStartPageElement: {
        prototype: HTMLStartPageElement;
        new (): HTMLStartPageElement;
    };
    interface HTMLSubmitPageElement extends Components.SubmitPage, HTMLStencilElement {
    }
    var HTMLSubmitPageElement: {
        prototype: HTMLSubmitPageElement;
        new (): HTMLSubmitPageElement;
    };
    interface HTMLElementTagNameMap {
        "app-root": HTMLAppRootElement;
        "question-page": HTMLQuestionPageElement;
        "start-page": HTMLStartPageElement;
        "submit-page": HTMLSubmitPageElement;
    }
}
declare namespace LocalJSX {
    interface AppRoot {
    }
    interface QuestionPage {
        "onAnswerSelected"?: (event: QuestionPageCustomEvent<any>) => void;
        "question"?: any;
        "section"?: string;
    }
    interface StartPage {
        "onStart"?: (event: StartPageCustomEvent<any>) => void;
    }
    interface SubmitPage {
        "answers"?: any;
    }
    interface IntrinsicElements {
        "app-root": AppRoot;
        "question-page": QuestionPage;
        "start-page": StartPage;
        "submit-page": SubmitPage;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "app-root": LocalJSX.AppRoot & JSXBase.HTMLAttributes<HTMLAppRootElement>;
            "question-page": LocalJSX.QuestionPage & JSXBase.HTMLAttributes<HTMLQuestionPageElement>;
            "start-page": LocalJSX.StartPage & JSXBase.HTMLAttributes<HTMLStartPageElement>;
            "submit-page": LocalJSX.SubmitPage & JSXBase.HTMLAttributes<HTMLSubmitPageElement>;
        }
    }
}
